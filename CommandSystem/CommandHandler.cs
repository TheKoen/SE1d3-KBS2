using System;
using System.Collections.Generic;
using System.Linq;
using CommandSystem.Exceptions;

namespace CommandSystem
{
    public static class CommandHandler
    {
        // List of commands that the console can call
        private static readonly List<Type> CommandList = new List<Type>();
        
        /// <summary>
        /// Registers an <see cref="ICommand"/> to the <see cref="CommandHandler"/> for future use
        /// </summary>
        /// <param name="command"><see cref="ICommand"/> to be ran</param>
        public static void RegisterCommand(Type command)
        {
            // Making sure our Type can be assigned to ICommand
            if (!typeof(ICommand).IsAssignableFrom(command))
                throw new CommandHandlerException("Parameter \"command\" must implement ICommand");
            
            // Getting a list of existing attributes
            var attributes = CommandList.Select(c =>
                (CommandMetadataAttribute) Attribute.GetCustomAttribute(c,
                    typeof(CommandMetadataAttribute))).ToList();
            // Getting the attribute of the given Type
            var thisAttribute =
                (CommandMetadataAttribute) Attribute.GetCustomAttribute(command,
                    typeof(CommandMetadataAttribute));
            
            // Checking for conflicts with attribute keys and aliases
            attributes.ForEach(attribute =>
            {
                if (thisAttribute.Key == attribute.Key || thisAttribute.Aliases.Contains(attribute.Key))
                    throw new CommandHandlerException($"Command \"{command.Name}\" conflicts with Key \"{attribute.Key}\"");
                attribute.Aliases.ToList().ForEach(alias =>
                {
                    if (thisAttribute.Key == alias || thisAttribute.Aliases.Contains(alias))
                        throw new CommandHandlerException($"Command \"{command.Name}\" conflicts with Alias \"{alias}\"");
                });
            });

            CommandList.Add(command);
        }
        
        /// <summary>
        /// Gets every registered <see cref="ICommand"/>
        /// </summary>
        /// <returns><see cref="IEnumerable{Type}"/> of commands</returns>
        public static IEnumerable<Type> GetCommands() =>
            new List<Type>(CommandList);
        
        /// <summary>
        /// Gets the name of every registered <see cref="ICommand"/>
        /// </summary>
        /// <returns><see cref="IEnumerable{String}"/> of names</returns>
        public static IEnumerable<string> GetCommandNames() =>
            CommandList.Select(c =>
                ((CommandMetadataAttribute) Attribute.GetCustomAttribute(c, typeof(CommandMetadataAttribute))).Key
            );
        
        
        
        /// <summary>
        /// Runs a <see cref="ICommand"/>
        /// </summary>
        /// <param name="name">Name of the <see cref="ICommand"/> to run</param>
        /// <param name="args">Arguments for the <see cref="ICommand"/></param>
        /// <returns>Output generated by the <see cref="ICommand"/></returns>
        public static IEnumerable<char> RunCommand(string name, params string[] args)
        {
            // Finding command(s) that match the given string
            var commands = CommandList.Where(c =>
            {
                var attribute =
                    (CommandMetadataAttribute) Attribute.GetCustomAttribute(c,
                        typeof(CommandMetadataAttribute));
                return attribute.Aliases.Contains(name) || attribute.Key == name;
            }).ToList();
            // Making sure there's only one matching command, otherwise something's gone wrong
            if (commands.Count < 1) throw new CommandInputException($"Unknown command \"{name}\"");
            if (commands.Count > 1) throw new Exception("There should never be multiple commands with the same key or aliases");
            var command = commands[0];
            
            // Constructing and running a command
            var result = ((ICommand) Activator.CreateInstance(command)).Run(args);
            return result;
        }
        
        /// <summary>
        /// Attempts to run an <see cref="ICommand"/> using the given input
        /// </summary>
        /// <param name="input">The input to use</param>
        /// <returns>Output from the command</returns>
        public static IEnumerable<char> HandleInput(string input)
        {
            if (input.Trim().Length == 0)
                throw new CommandInputException("Received empty string or string with only whitespace");
            
            // Separating words in the input
            var segments = input.Trim().Split(' ');

            // Getting the command name and arguments
            var commandName = segments[0].ToLower();
            var args = new string[segments.Length - 1];
            Array.Copy(segments, 1, args, 0, args.Length);
            
            // Running the command
            return RunCommand(commandName, args);
        }
    }
}